priority -50

# HTML
snippet atag "Anchor tag target _blank"
<a href="$1" target="_blank" rel="noopener noreferrer">${0:${VISUAL:TEXT}}</a>
endsnippet
# JS
snippet log "Console log statement"
console.log($0);
endsnippet

snippet debug "Debugger with ESLint disabled"
debugger; // eslint-disable-line
endsnippet

# React basic snippets

snippet rcomp "React component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class $1 extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      $0
    );
  }
}

$1.propTypes = {

};

export default $1;
endsnippet

snippet fcomp "Stateless functional component" b
import React from 'react';
import PropTypes from 'prop-types';

const $1 = () => (
  $0
);

$1.propTypes = {

};

export default $1;
endsnippet

snippet ccomp "Redux-connected functional component" b
import React from 'react';
import { connect } from 'react-redux';
import PropTypes from 'prop-types';

const $1 = () => (
  $0
);

$1.propTypes = {

};

const mapStateToProps = (state, {$2}) => {
  $3
  return {
    $4
  };
};

export default connect(mapStateToProps, {})($1);
endsnippet

snippet msp "mapStateToProps" b
const mapStateToProps = (state, {$1}) => {
  $2
  return {
    $0
  };
};
endsnippet

snippet imp "Import a library" b
import $1 from '$2';
endsnippet

snippet imrc "Import @reactions/Component" b
import Component from '@reactions/component';$0
endsnippet

snippet unset "Add unset from themes.js"
${props => props.theme.unset};$0
endsnippet

snippet ptc "Add a colour from themes.js"
${props => props.theme.colours.$1};$0
endsnippet

snippet ptrc "Add an rgab colour from themes.js"
${props => props.theme.rgba(props.theme.colours.$1, $2)};$0
endsnippet

snippet sty "Create a styled component" b
export const $1 = styled.${2:div}\`
  $0
\`;
endsnippet

snippet sty( "Create a styled React component" b
export const $1 = styled($2)\`
  $0
\`;
endsnippet

snippet styled "Setup styled.js file import" b
import styled from 'styled-components';

export const $1 = styled.${2:div}\`
  $0
\`;
endsnippet

snippet type "Redux action type"
export const $1 = '$1';
endsnippet

snippet action "Redux-pack action"
export const $1 = $2 => ({
  type: $3,
  $0
});
endsnippet

snippet reducer "Create a basic redux reducer"
import { handle } from 'redux-pack';

const initialState = {};

export default (state = initialState, action) => {
  const { type, payload, meta } = action;
  switch (type) {
    case $1:
      $2
    default:
      return state;
  }
};
endsnippet
